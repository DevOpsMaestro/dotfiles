" -------------------------------------------
" Plugin Management
" -------------------------------------------
"  The following is to automatically setup 'vim-plug' if it is not installed
"  on this system.
" Install vim-plug if not found, has to be before plugins section.
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" Use a plugin manager like Vim-Plug for easier plugin management
call plug#begin('~/.vim/bundle')
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' } " File navigation
Plug 'tpope/vim-fugitive'   " Git integration
Plug 'dense-analysis/ale'   " Formatting and linting
Plug 'jiangmiao/auto-pairs' " Auto-pairs for brackets, quotes, etc.
Plug 'alvan/vim-closetag'
Plug 'honza/vim-snippets'
Plug 'junegunn/goyo.vim', { 'for': 'markdown' }
Plug 'vimwiki/vimwiki'
Plug 'altercation/vim-colors-solarized'
" Plug 'vim-scripts/Gundo'
call plug#end()

" -------------------------------------------
" File Navigation and Exploration
" -------------------------------------------
" NERDTree configuration
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
let NERDTreeMouseMode=2

augroup MouseInNERDTreeOnly
    autocmd!
    autocmd BufEnter NERD_tree_* set mouse=a
    autocmd BufLeave NERD_tree_* set mouse=
augroup END
set mouse=

" Quick pane navigation
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Open file under cursor in a new tab
map <F9> <Esc><C-W>gF<CR>:tabm<CR>

" -------------------------------------------
" Git Integration
" -------------------------------------------
" Use Fugitive for Git commands within Vim
map <leader>gs :Git status<CR>
map <leader>gc :Git commit<CR>
map <leader>gp :Git push<CR>
map <leader>gl :Git pull<CR>

" -------------------------------------------
" Code Formatting and Linting
" -------------------------------------------
" Integrate ALE for linting and fixing
let g:ale_fix_on_save = 1
let g:ale_linters = {'python': ['flake8'], 'yaml': ['yamllint']}


" -------------------------------------------
" Search and Navigation
" -------------------------------------------
set incsearch          " Show search matches as you type
set ignorecase         " Ignore case in search patterns
set smartcase          " Override ignorecase if search pattern contains uppercase
set gdefault           " Apply global flag by default for substitutions
set hlsearch           " Highlight search results
set showmatch          " Highlight matching brackets
set hidden             " Enable background buffers

" -------------------------------------------
" Appearance and Visual Settings
" -------------------------------------------
syntax enable          " Enable syntax highlighting
set encoding=utf-8     " Set file encoding
set cursorline         " Highlight current line
set cursorcolumn       " Highlight current column
set background=dark    " Use dark background for better contrast
colorscheme solarized  " Set colorscheme
set termguicolors      " Enable true colors support

" Display settings
set ls=2               " Always show status line
set showmode           " Display current mode
set showcmd            " Display incomplete commands
set modeline           " Enable modelines
set title              " Show the file title in window title bar
set number             " Show line numbers
set norelativenumber   " Disable relative line numbers
set scrolloff=3        " Keep 3 lines above/below the cursor when scrolling
set visualbell         " Use visual bell instead of beeping
set ttyfast            " Optimize for fast terminal
set ruler              " Show cursor position
set laststatus=2       " Always show the last status line
set linebreak          " Wrap lines at convenient points
set showbreak=â–¹        " Character to show at wrapped lines
set wrap               " Enable line wrapping
set textwidth=80       " Set text width to 80 characters
set formatoptions=qrn1 " Text formatting options
set colorcolumn=80     " Highlight the 80th column

" -------------------------------------------
" Indentation Settings
" -------------------------------------------
set autoindent         " Auto-indent new lines
set shiftwidth=2       " Set indentation width
set tabstop=2          " Set tab width
set softtabstop=2      " Set soft tab width
set shiftround         " Round indent to multiple of shiftwidth
set expandtab          " Use spaces instead of tabs

" -------------------------------------------
" Miscellaneous Settings
" -------------------------------------------
set history=50         " Keep 50 lines of command line history
set backspace=indent,eol,start " Make backspace more powerful
set wildmenu           " Enable enhanced command line completion
set wildmode=list:longest " Show completion options
set clipboard=unnamedplus  " Use system clipboard
set nocompatible       " Use Vim defaults instead of Vi compatibility
set shell=/bin/bash    " Set default shell
set lazyredraw         " Faster scrolling and redrawing
set matchtime=3        " Delay before showing matching parens
set nofoldenable       " Disable folding by default
set dictionary=/usr/share/dict/words " Set path for spell checking
set backupskip=/tmp/*,/private/tmp/*  " Skip backups for these paths
set noesckeys          " Disable Escape key mappings in terminal mode

" -------------------------------------------
" Session Management
" -------------------------------------------
" Save and restore sessions
nnoremap <Leader>ss :mksession! ~/vim-session.vim<CR>
nnoremap <Leader>sr :source ~/vim-session.vim<CR>

" -------------------------------------------
" Custom Key Mappings
" -------------------------------------------
" Switch tabs
map 8 <Esc>:tabe 
map 9 gT
map 0 gt

" Gundo toggle
" FYSA: Gundo vim requires said to be compiled with Python 2.4+
" map <F5> <Esc>:GundoToggle<CR>
" nnoremap <F5> :GundoToggle<CR>

" Toggle line-wrap
map <F6> <Esc>:set wrap!<CR>
